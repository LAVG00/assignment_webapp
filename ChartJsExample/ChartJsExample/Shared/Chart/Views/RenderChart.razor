@inject IDataGateway dataGateway
@inject IChartJsInterop chartJsInterop

<div class="container">
    <EditForm Model="@formModel">
    @* Example of chart drawing *@
    <div class="row">
        <h4>Test chart:</h4>
        <div style="width:75%;">
            <canvas id="chartCanvas"></canvas>
        </div>
    </div>
  
    <div class="row">
        <InputDate style="width: 150px;" @bind-Value="formModel.ChartDate" />
        <button style="width: 150px;" @onclick="DrawChart">Apply Date</button>
    </div>

    @* Example of test data (as json) *@
    <div class="row">
        <h4>Test data:</h4>
        <span>@TestDataJson</span>
    </div>
    </EditForm>
</div>

@code
{
    string TestDataJson = string.Empty;
    Report[] reports = Array.Empty<Report>();
    FormModel formModel = new FormModel();

    protected override async Task OnInitializedAsync()
    {
        reports = await dataGateway.LoadReports();
        TestDataJson = System.Text.RegularExpressions.Regex.Unescape(System.Text.Json.JsonSerializer.Serialize(reports));
        
        await chartJsInterop.Draw();
        await InvokeAsync(StateHasChanged);
    }

    private async Task DrawChart()
    {
        await chartJsInterop.Draw(formModel.ChartDate);
        await InvokeAsync(StateHasChanged);
    }

    public class FormModel {
        public DateTime? ChartDate  { get; set; }
    }
}
